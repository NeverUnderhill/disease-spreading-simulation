{"version":3,"sources":["types/ParticleType.ts","common/constants.ts","common/Canvas.tsx","common/Animation.tsx","App.tsx","serviceWorker.js","index.js"],"names":["States","Canvas","state","scalingFactor","getScalingFactor","width","document","documentElement","clientWidth","height","clientHeight","ctx","this","refs","canvas","getContext","clearRect","props","particles","particle","save","beginPath","arc","x","y","Math","PI","fillStyle","fill","restore","className","ref","React","Component","Animation","rAF","generateNRandomParticles","startTime","Date","active","updateAnimationState","requestAnimationFrame","moveParticles","updateParticlesState","setState","resetState","toggleActive","prevState","infector","length","Infected","infectee","Healthy","calculateDistance","random","a","b","sqrt","dx","dy","isInRange","push","ms","time","getDate","getTime","range","cancelAnimationFrame","undefined","n","generateRandomParticle","i","Button","variant","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.536ffbff.chunk.js","sourcesContent":["export default interface ParticleType {\r\n  x: number;\r\n  y: number;\r\n  dx: number;\r\n  dy: number;\r\n  state: States\r\n}\r\n\r\nexport enum States {\r\n  Healthy = \"#1eb2a6\",\r\n  Infected = \"#f67575\"\r\n}","export const PARTICLE_RADIUS: number = 3;\r\nexport const CANVAS_WIDTH: number = 500;\r\nexport const CANVAS_HEIGHT: number = 500;\r\nexport const MAX_SPEED: number = 3;\r\nexport const NUMBER_OF_PARTICLES: number = 200;\r\nexport const D_T = 100;\r\nexport const INFECTION_PROBABILITY = 0.06;\r\nexport const SPREAD_RADIUS = 10;\r\nexport const INIT_INFECTED_PROBABILITY = 0.005;","import React from 'react';\r\nimport ParticleType from '../types/ParticleType';\r\nimport * as Constants from './constants';\r\n\r\ninterface CanvasProps {\r\n  particles: ParticleType[];\r\n}\r\n\r\ninterface CanvasState {\r\n  scalingFactor: number;\r\n}\r\n\r\nclass Canvas extends React.Component<CanvasProps, CanvasState> {\r\n  state = {\r\n    scalingFactor: this.getScalingFactor()\r\n  }\r\n\r\n  getScalingFactor() {\r\n    const width = document.documentElement.clientWidth;\r\n    const height = document.documentElement.clientHeight;\r\n    return 0.6 * ((width < height) ? width / Constants.CANVAS_WIDTH : height / Constants.CANVAS_HEIGHT);\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const canvas = this.refs.canvas as HTMLCanvasElement;\r\n    const ctx = canvas.getContext('2d');\r\n    if (ctx) ctx.clearRect(\r\n      0,\r\n      0,\r\n      Constants.CANVAS_WIDTH * this.state.scalingFactor,\r\n      Constants.CANVAS_HEIGHT * this.state.scalingFactor\r\n    );\r\n\r\n    for(const particle of this.props.particles) {\r\n      if(ctx){\r\n        ctx.save();\r\n        ctx.beginPath();\r\n        ctx.arc(\r\n          particle.x * this.state.scalingFactor,\r\n          particle.y * this.state.scalingFactor,\r\n          Constants.PARTICLE_RADIUS * this.state.scalingFactor,\r\n          0,\r\n          2 * Math.PI\r\n        );\r\n        ctx.fillStyle = particle.state;\r\n        ctx.fill();\r\n        ctx.restore();\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <div className='App-canvas'>\r\n      <canvas\r\n        ref=\"canvas\"\r\n        width={Constants.CANVAS_WIDTH * this.state.scalingFactor}\r\n        height={Constants.CANVAS_HEIGHT * this.state.scalingFactor}>\r\n      </canvas>\r\n    </div>\r\n  }\r\n}\r\n\r\nexport default Canvas;","import React from 'react';\r\nimport ParticleType, { States } from '../types/ParticleType';\r\nimport * as Constants from './constants';\r\nimport Canvas from './Canvas';\r\nimport Button from '@material-ui/core/Button';\r\n\r\ninterface AnimationState {\r\n  particles: ParticleType[];\r\n  rAF: number;\r\n  startTime: Date;\r\n  active: boolean;\r\n}\r\n\r\nclass Animation extends React.Component {\r\n  state = {\r\n    rAF: 0,\r\n    particles: this.generateNRandomParticles(Constants.NUMBER_OF_PARTICLES),\r\n    startTime: new Date(),\r\n    active: true\r\n  }\r\n\r\n  updateAnimationState = () => {\r\n    if(this.state.active) {\r\n      let rAF = requestAnimationFrame(this.updateAnimationState);\r\n      let particles = this.moveParticles()\r\n      particles = this.updateParticlesState(particles); \r\n      this.setState({rAF: rAF, particles: particles});\r\n    } else {\r\n      let rAF = requestAnimationFrame(this.updateAnimationState);\r\n      this.setState({rAF: rAF});\r\n    }\r\n  }\r\n\r\n  resetState = () => {\r\n    this.setState({particles: this.generateNRandomParticles(Constants.NUMBER_OF_PARTICLES)});\r\n  }\r\n\r\n  updateParticlesState(particles: ParticleType[]) {\r\n    for(let infector = 0; infector < particles.length; infector++) {\r\n      if(particles[infector].state === States.Infected) {\r\n        for(let infectee = 0; infectee < particles.length; infectee++) {\r\n          if(particles[infectee].state === States.Healthy) {\r\n            if(this.calculateDistance(particles[infector], particles[infectee]) < Constants.SPREAD_RADIUS){\r\n              if(Math.random() < Constants.INFECTION_PROBABILITY) {\r\n                particles[infectee].state = States.Infected;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return particles;\r\n  }\r\n\r\n  calculateDistance(a: ParticleType, b: ParticleType) {\r\n    return Math.sqrt((a.x - b.x)**2 + (a.y - b.y)**2);\r\n  }\r\n\r\n  moveParticles() {\r\n    let particles: ParticleType[] = [];\r\n    for(let particle of this.state.particles) {\r\n      let x = particle.x + particle.dx;\r\n      let y = particle.y + particle.dy;\r\n      let dx = this.isInRange(x, Constants.CANVAS_WIDTH) ? particle.dx : -particle.dx;\r\n      let dy = this.isInRange(y, Constants.CANVAS_HEIGHT) ? particle.dy : -particle.dy;\r\n      particles.push({x, y, dx, dy, state: particle.state});\r\n    }\r\n    return particles;\r\n  }\r\n\r\n  elapsedMiliseconds(ms: number, time: Date) {\r\n    return time.getDate() - this.state.startTime.getTime() > ms;\r\n  }\r\n\r\n  isInRange(x: number, range: number) : boolean {\r\n    return  (x >= Constants.PARTICLE_RADIUS && x <= range - Constants.PARTICLE_RADIUS);\r\n  }\r\n\r\n  componentDidMount() {\r\n    let rAF = requestAnimationFrame(this.updateAnimationState);\r\n    this.setState({rAF: rAF});\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    cancelAnimationFrame(this.state.rAF);\r\n  }\r\n\r\n  generateRandomParticle(state?: States) : ParticleType {\r\n    let x = Constants.PARTICLE_RADIUS + Math.random() * (Constants.CANVAS_WIDTH - 2 * Constants.PARTICLE_RADIUS);\r\n    let y = Constants.PARTICLE_RADIUS + Math.random() * (Constants.CANVAS_HEIGHT - 2 * Constants.PARTICLE_RADIUS);\r\n    let dx = (Math.random() - 0.5) * Constants.MAX_SPEED;\r\n    let dy = (Math.random() - 0.5) * Constants.MAX_SPEED;\r\n\r\n    if(state !== undefined) {\r\n      return {x, y, dx, dy, state: state};\r\n    } else {\r\n      return {x, y, dx, dy, state: (Math.random() >= Constants.INIT_INFECTED_PROBABILITY) ? States.Healthy : States.Infected};\r\n    }\r\n  }\r\n  \r\n  generateNRandomParticles(n: number) : ParticleType[] {\r\n    let particles: ParticleType[] = [];\r\n    particles.push(this.generateRandomParticle(States.Infected));\r\n    for(let i = 0; i < n; i++){\r\n      particles.push(this.generateRandomParticle());\r\n    }\r\n    return particles;\r\n  }\r\n\r\n  toggleActive = () => {\r\n    this.setState((prevState: AnimationState) => {\r\n      return {active: !prevState.active};\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return <div>\r\n      <Canvas particles={this.state.particles}/> \r\n      <Button variant=\"outlined\" className=\"start-button\" onClick={this.resetState}>\r\n        Reset\r\n      </Button>\r\n      <Button variant=\"outlined\" className=\"start-button\" onClick={this.toggleActive}>\r\n        {this.state.active ? \"Stop\" : \"Start\"}\r\n      </Button>\r\n    </div>\r\n  }\r\n}\r\n\r\nexport default Animation;","import React from 'react';\nimport Animation from './common/Animation';\n\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>\n          brovid simulation environment\n        </h1>\n        <Animation/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}