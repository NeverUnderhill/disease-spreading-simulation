{"version":3,"sources":["types/ParticleType.ts","common/constants.ts","common/Canvas.tsx","common/ParametersDialog.tsx","common/Animation.tsx","common/Container.tsx","App.tsx","serviceWorker.js","index.js"],"names":["States","Canvas","state","scalingFactor","getScalingFactor","c","this","isMobile","width","document","documentElement","clientWidth","height","clientHeight","a","check","navigator","userAgent","vendor","test","substr","ctx","refs","canvas","getContext","clearRect","props","particles","particle","save","beginPath","arc","x","y","Math","PI","fillStyle","fill","restore","className","ref","React","Component","ParametersDialog","Dialog","onClose","handleClose","aria-labelledby","open","DialogTitle","Slider","value","numOfParticles","min","max","onChange","handleNumOfParticlesChange","valueLabelDisplay","initInfectedProb","handleInitInfectedProbChange","step","Animation","rAF","generateNRandomParticles","startTime","Date","active","dialogOpen","updateAnimationState","requestAnimationFrame","moveParticles","updateParticlesState","setState","resetState","handleDialogClose","toggleActive","prevState","showDialog","infector","length","Infected","infectee","Healthy","calculateDistance","random","b","sqrt","dx","dy","isInRange","push","ms","time","getDate","getTime","range","cancelAnimationFrame","undefined","n","generateRandomParticle","i","Button","variant","onClick","Container","e","newValue","handleInitInfectedPRobChange","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0LAQYA,E,0FAAAA,K,kBAAAA,E,oBAAAA,M,KCRL,ICsEQC,E,4MAxDbC,MAAQ,CACNC,cAAe,EAAKC,oB,iEAIpB,IAAIC,EAAIC,KAAKC,WAAa,GAAM,GAC1BC,EAAQC,SAASC,gBAAgBC,YACjCC,EAASH,SAASC,gBAAgBG,aACxC,OAAOR,GAAMG,EAAQI,EAAUJ,EDrBC,ICqBgCI,EDpB/B,O,iCCwBjC,IACUE,EADNC,GAAQ,EAEZ,OADUD,EAAy7DE,UAAUC,WAAWD,UAAUE,QAAl9D,2TAA2TC,KAAKL,IAAI,0kDAA0kDK,KAAKL,EAAEM,OAAO,EAAE,OAAKL,GAAQ,GACp7DA,I,2CAIP,IACMM,EADSf,KAAKgB,KAAKC,OACNC,WAAW,MAC1BH,GAAKA,EAAII,UACX,EACA,EDnC8B,ICoCLnB,KAAKJ,MAAMC,cDnCL,ICoCLG,KAAKJ,MAAMC,eAPpB,oBAUGG,KAAKoB,MAAMC,WAVd,IAUnB,IAAI,EAAJ,qBAA4C,CAAC,IAAnCC,EAAkC,QACvCP,IACDA,EAAIQ,OACJR,EAAIS,YACJT,EAAIU,IACFH,EAASI,EAAI1B,KAAKJ,MAAMC,cACxByB,EAASK,EAAI3B,KAAKJ,MAAMC,cD/CK,ECgDDG,KAAKJ,MAAMC,cACvC,EACA,EAAI+B,KAAKC,IAEXd,EAAIe,UAAYR,EAAS1B,MACzBmB,EAAIgB,OACJhB,EAAIiB,YAvBW,iC,+BA6BnB,OAAO,yBAAKC,UAAU,cACpB,4BACEC,IAAI,SACJhC,MD9D4B,IC8DIF,KAAKJ,MAAMC,cAC3CS,OD9D6B,IC8DKN,KAAKJ,MAAMC,qB,GAnDhCsC,IAAMC,W,gCCINC,E,uKAEjB,OACI,kBAACC,EAAA,EAAD,CACEC,QAASvC,KAAKoB,MAAMoB,YACpBC,kBAAgB,sBAChBC,KAAM1C,KAAKoB,MAAMsB,MAEnB,yBAAKT,UAAU,kBACX,kBAACU,EAAA,EAAD,8BADJ,+BAGI,kBAACC,EAAA,EAAD,CACEC,MAAO7C,KAAKoB,MAAM0B,eAClBC,IAAK,GACLC,IAAK,IACLC,SAAUjD,KAAKoB,MAAM8B,2BACrBT,kBAAgB,oBAChBU,kBAAkB,SATxB,0CAYI,kBAACP,EAAA,EAAD,CACEC,MAAO7C,KAAKoB,MAAMgC,iBAClBL,IAAK,KACLC,IAAK,EACLC,SAAUjD,KAAKoB,MAAMiC,6BACrBZ,kBAAgB,oBAChBa,KAAM,IACNH,kBAAkB,SAnBxB,c,GARsChB,IAAMC,WC6IrCmB,E,4MAvIb3D,MAAQ,CACN4D,IAAK,EACLnC,UAAW,EAAKoC,yBAAyB,EAAKrC,MAAM0B,gBACpDY,UAAW,IAAIC,KACfC,QAAQ,EACRC,YAAY,G,EAGdC,qBAAuB,WACrB,GAAG,EAAKlE,MAAMgE,OAAQ,CACpB,IAAIJ,EAAMO,sBAAsB,EAAKD,sBACjCzC,EAAY,EAAK2C,gBACrB3C,EAAY,EAAK4C,qBAAqB5C,GACtC,EAAK6C,SAAS,CAACV,IAAKA,EAAKnC,UAAWA,QAC/B,CACL,IAAImC,EAAMO,sBAAsB,EAAKD,sBACrC,EAAKI,SAAS,CAACV,IAAKA,M,EAIxBW,WAAa,WACX,EAAKD,SAAS,CAAC7C,UAAW,EAAKoC,yBAAyB,EAAKrC,MAAM0B,mB,EAGrEsB,kBAAoB,WAClB,EAAKF,SAAS,CAACL,YAAY,EAAOxC,UAAW,EAAKoC,yBAAyB,EAAKrC,MAAM0B,mB,EA2ExFuB,aAAe,WACb,EAAKH,UAAS,SAACI,GACb,MAAO,CAACV,QAASU,EAAUV,Y,EAI/BW,WAAa,WACX,EAAKL,SAAS,CAACL,YAAY,K,mEA/ERxC,GACnB,IAAI,IAAImD,EAAW,EAAGA,EAAWnD,EAAUoD,OAAQD,IACjD,GAAGnD,EAAUmD,GAAU5E,QAAUF,EAAOgF,SACtC,IAAI,IAAIC,EAAW,EAAGA,EAAWtD,EAAUoD,OAAQE,IAC9CtD,EAAUsD,GAAU/E,QAAUF,EAAOkF,SACnC5E,KAAK6E,kBAAkBxD,EAAUmD,GAAWnD,EAAUsD,IHlDxC,IGmDZ/C,KAAKkD,SHpDe,MGqDrBzD,EAAUsD,GAAU/E,MAAQF,EAAOgF,UAO/C,OAAOrD,I,wCAGSb,EAAiBuE,GACjC,OAAOnD,KAAKoD,KAAK,SAACxE,EAAEkB,EAAIqD,EAAErD,EAAI,GAAb,SAAkBlB,EAAEmB,EAAIoD,EAAEpD,EAAI,M,sCAI/C,IADc,EACVN,EAA4B,GADlB,cAEMrB,KAAKJ,MAAMyB,WAFjB,IAEd,IAAI,EAAJ,qBAA0C,CAAC,IAAnCC,EAAkC,QACpCI,EAAIJ,EAASI,EAAIJ,EAAS2D,GAC1BtD,EAAIL,EAASK,EAAIL,EAAS4D,GAC1BD,EAAKjF,KAAKmF,UAAUzD,EH5EM,KG4EuBJ,EAAS2D,IAAM3D,EAAS2D,GACzEC,EAAKlF,KAAKmF,UAAUxD,EH5EO,KG4EuBL,EAAS4D,IAAM5D,EAAS4D,GAC9E7D,EAAU+D,KAAK,CAAC1D,IAAGC,IAAGsD,KAAIC,KAAItF,MAAO0B,EAAS1B,SAPlC,8BASd,OAAOyB,I,yCAGUgE,EAAYC,GAC7B,OAAOA,EAAKC,UAAYvF,KAAKJ,MAAM8D,UAAU8B,UAAYH,I,gCAGjD3D,EAAW+D,GACnB,OAAS/D,GHzF0B,GGyFQA,GAAK+D,EHzFb,I,0CG6FnC,IAAIjC,EAAMO,sBAAsB/D,KAAK8D,sBACrC9D,KAAKkE,SAAS,CAACV,IAAKA,M,6CAIpBkC,qBAAqB1F,KAAKJ,MAAM4D,O,6CAGX5D,GACrB,IAAI8B,EHtG+B,EGsGC,IAAAE,KAAKkD,SACrCnD,EHvG+B,EGuGC,IAAAC,KAAKkD,SACrCG,EHrGyB,GGqGnBrD,KAAKkD,SAAW,IACtBI,EHtGyB,GGsGnBtD,KAAKkD,SAAW,IAE1B,YAAaa,IAAV/F,EACM,CAAC8B,IAAGC,IAAGsD,KAAIC,KAAItF,MAAOA,GAEtB,CAAC8B,IAAGC,IAAGsD,KAAIC,KAAItF,MAAQgC,KAAKkD,UAAY9E,KAAKoB,MAAMgC,iBAAoB1D,EAAOkF,QAAUlF,EAAOgF,Y,+CAIjFkB,GACvB,IAAIvE,EAA4B,GAChCA,EAAU+D,KAAKpF,KAAK6F,uBAAuBnG,EAAOgF,WAClD,IAAI,IAAIoB,EAAI,EAAGA,EAAIF,EAAGE,IACpBzE,EAAU+D,KAAKpF,KAAK6F,0BAEtB,OAAOxE,I,+BAcP,OAAO,6BACL,kBAAC,EAAD,CACE6B,2BAA4BlD,KAAKoB,MAAM8B,2BACvCJ,eAAgB9C,KAAKoB,MAAM0B,eAC3BM,iBAAkBpD,KAAKoB,MAAMgC,iBAC7BC,6BAA8BrD,KAAKoB,MAAMiC,6BACzCb,YAAaxC,KAAKoE,kBAClB1B,KAAM1C,KAAKJ,MAAMiE,aAGnB,kBAAC,EAAD,CAAQxC,UAAWrB,KAAKJ,MAAMyB,YAC9B,kBAAC0E,EAAA,EAAD,CAAQC,QAAQ,WAAW/D,UAAU,eAAegE,QAASjG,KAAKmE,YAAlE,SAGA,kBAAC4B,EAAA,EAAD,CAAQC,QAAQ,WAAW/D,UAAU,eAAegE,QAASjG,KAAKqE,cAC/DrE,KAAKJ,MAAMgE,OAAS,OAAS,SAEhC,kBAACmC,EAAA,EAAD,CAAQC,QAAQ,WAAW/D,UAAU,eAAegE,QAASjG,KAAKuE,YAAlE,oB,GAjIkBpC,IAAMC,WCdT8D,E,4MACnBtG,MAAwB,CACtBkD,eAAgB,IAChBM,iBAAkB,K,EAGpBF,2BAA6B,SAACiD,EAAQC,GACpC,EAAKlC,SAAS,CAACpB,eAAgBsD,K,EAGjCC,6BAA+B,SAACF,EAAQC,GACtC,EAAKlC,SAAS,CAACd,iBAAkBgD,K,uDAIjC,OACE,yBAAKnE,UAAU,OACb,4BAAQA,UAAU,cAChB,qFAGA,kBAAC,EAAD,CACEmB,iBAAkBpD,KAAKJ,MAAMwD,iBAC7BC,6BAA8BrD,KAAKqG,6BACnCvD,eAAgB9C,KAAKJ,MAAMkD,eAC3BI,2BAA4BlD,KAAKkD,mC,GAzBNf,IAAMC,W,MCG9BkE,MANf,WACE,OACE,kBAAC,EAAD,OCKgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF3G,SAAS4G,eAAe,SDyHpB,kBAAmBrG,WACrBA,UAAUsG,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.329798c5.chunk.js","sourcesContent":["export default interface ParticleType {\r\n  x: number;\r\n  y: number;\r\n  dx: number;\r\n  dy: number;\r\n  state: States\r\n}\r\n\r\nexport enum States {\r\n  Healthy = \"#1eb2a6\",\r\n  Infected = \"#f67575\"\r\n}","export const PARTICLE_RADIUS: number = 3;\r\nexport const CANVAS_WIDTH: number = 500;\r\nexport const CANVAS_HEIGHT: number = 500;\r\nexport const MAX_SPEED: number = 3;\r\nexport const D_T = 100;\r\nexport const INFECTION_PROBABILITY = 0.06;\r\nexport const SPREAD_RADIUS = 10;","import React from 'react';\r\nimport ParticleType from '../types/ParticleType';\r\nimport * as Constants from './constants';\r\nimport { Button } from '@material-ui/core';\r\n\r\ninterface CanvasProps {\r\n  particles: ParticleType[];\r\n}\r\n\r\ninterface CanvasState {\r\n  scalingFactor: number;\r\n}\r\n\r\nclass Canvas extends React.Component<CanvasProps, CanvasState> {\r\n  state = {\r\n    scalingFactor: this.getScalingFactor()\r\n  }\r\n\r\n  getScalingFactor() {\r\n    let c = this.isMobile() ? 0.8 : 0.6;\r\n    const width = document.documentElement.clientWidth;\r\n    const height = document.documentElement.clientHeight;\r\n    return c * ((width < height) ? width / Constants.CANVAS_WIDTH : height / Constants.CANVAS_HEIGHT);\r\n  }\r\n\r\n  isMobile() {\r\n    var check = false;\r\n    (function(a){if(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0,4))) check = true;})(navigator.userAgent||navigator.vendor);\r\n    return check;\r\n  };\r\n\r\n  componentDidUpdate() {\r\n    const canvas = this.refs.canvas as HTMLCanvasElement;\r\n    const ctx = canvas.getContext('2d');\r\n    if (ctx) ctx.clearRect(\r\n      0,\r\n      0,\r\n      Constants.CANVAS_WIDTH * this.state.scalingFactor,\r\n      Constants.CANVAS_HEIGHT * this.state.scalingFactor\r\n    );\r\n\r\n    for(const particle of this.props.particles) {\r\n      if(ctx){\r\n        ctx.save();\r\n        ctx.beginPath();\r\n        ctx.arc(\r\n          particle.x * this.state.scalingFactor,\r\n          particle.y * this.state.scalingFactor,\r\n          Constants.PARTICLE_RADIUS * this.state.scalingFactor,\r\n          0,\r\n          2 * Math.PI\r\n        );\r\n        ctx.fillStyle = particle.state;\r\n        ctx.fill();\r\n        ctx.restore();\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <div className='App-canvas'>\r\n      <canvas\r\n        ref=\"canvas\"\r\n        width={Constants.CANVAS_WIDTH * this.state.scalingFactor}\r\n        height={Constants.CANVAS_HEIGHT * this.state.scalingFactor}>\r\n      </canvas>\r\n    </div>\r\n  }\r\n}\r\n\r\nexport default Canvas;","import React from 'react';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport { DialogTitle, Slider } from '@material-ui/core';\r\n\r\n\r\ninterface ParametersDialogProps {\r\n  handleClose: () => void,\r\n  numOfParticles: number,\r\n  handleNumOfParticlesChange: (e: any, newValue: number | number[]) => void,\r\n  initInfectedProb: number;\r\n  handleInitInfectedProbChange: (e: any, newValue: number | number[]) => void;\r\n  open: boolean\r\n}\r\n\r\ninterface ParametersDialogState {\r\n}\r\n\r\nexport default class ParametersDialog extends React.Component<ParametersDialogProps, ParametersDialogState> {\r\n  render() {\r\n    return (\r\n        <Dialog\r\n          onClose={this.props.handleClose}\r\n          aria-labelledby=\"simple-dialog-title\"\r\n          open={this.props.open}\r\n        >\r\n        <div className=\"dialog-content\">\r\n            <DialogTitle>Simulation parameters</DialogTitle>\r\n            Number of asshats who go out\r\n            <Slider\r\n              value={this.props.numOfParticles}\r\n              min={20}\r\n              max={200}\r\n              onChange={this.props.handleNumOfParticlesChange}\r\n              aria-labelledby=\"continuous-slider\"\r\n              valueLabelDisplay=\"auto\"\r\n            />\r\n            Percentage of initially infected people\r\n            <Slider\r\n              value={this.props.initInfectedProb}\r\n              min={0.001}\r\n              max={1}\r\n              onChange={this.props.handleInitInfectedProbChange}\r\n              aria-labelledby=\"continuous-slider\"\r\n              step={0.01}\r\n              valueLabelDisplay=\"auto\"\r\n            />\r\n            Henlo\r\n        </div>\r\n        </Dialog>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport ParticleType, { States } from '../types/ParticleType';\r\nimport * as Constants from './constants';\r\nimport Canvas from './Canvas';\r\nimport Button from '@material-ui/core/Button';\r\nimport ParametersDialog from './ParametersDialog';\r\n\r\ninterface AnimationProps {\r\n  numOfParticles: number;\r\n  handleNumOfParticlesChange: (e: any, newValue: number | number[]) => void;\r\n  initInfectedProb: number;\r\n  handleInitInfectedProbChange: (e: any, newValue: number | number[]) => void;\r\n}\r\n\r\ninterface AnimationState {\r\n  particles: ParticleType[];\r\n  rAF: number;\r\n  startTime: Date;\r\n  active: boolean;\r\n  dialogOpen: boolean;\r\n}\r\n\r\nclass Animation extends React.Component<AnimationProps, AnimationState> {\r\n  state = {\r\n    rAF: 0,\r\n    particles: this.generateNRandomParticles(this.props.numOfParticles),\r\n    startTime: new Date(),\r\n    active: true,\r\n    dialogOpen: false,\r\n  }\r\n\r\n  updateAnimationState = () => {\r\n    if(this.state.active) {\r\n      let rAF = requestAnimationFrame(this.updateAnimationState);\r\n      let particles = this.moveParticles()\r\n      particles = this.updateParticlesState(particles); \r\n      this.setState({rAF: rAF, particles: particles});\r\n    } else {\r\n      let rAF = requestAnimationFrame(this.updateAnimationState);\r\n      this.setState({rAF: rAF});\r\n    }\r\n  }\r\n\r\n  resetState = () => {\r\n    this.setState({particles: this.generateNRandomParticles(this.props.numOfParticles)});\r\n  }\r\n\r\n  handleDialogClose = () => {\r\n    this.setState({dialogOpen: false, particles: this.generateNRandomParticles(this.props.numOfParticles)});\r\n  }\r\n\r\n  updateParticlesState(particles: ParticleType[]) {\r\n    for(let infector = 0; infector < particles.length; infector++) {\r\n      if(particles[infector].state === States.Infected) {\r\n        for(let infectee = 0; infectee < particles.length; infectee++) {\r\n          if(particles[infectee].state === States.Healthy) {\r\n            if(this.calculateDistance(particles[infector], particles[infectee]) < Constants.SPREAD_RADIUS){\r\n              if(Math.random() < Constants.INFECTION_PROBABILITY) {\r\n                particles[infectee].state = States.Infected;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return particles;\r\n  }\r\n\r\n  calculateDistance(a: ParticleType, b: ParticleType) {\r\n    return Math.sqrt((a.x - b.x)**2 + (a.y - b.y)**2);\r\n  }\r\n\r\n  moveParticles() {\r\n    let particles: ParticleType[] = [];\r\n    for(let particle of this.state.particles) {\r\n      let x = particle.x + particle.dx;\r\n      let y = particle.y + particle.dy;\r\n      let dx = this.isInRange(x, Constants.CANVAS_WIDTH) ? particle.dx : -particle.dx;\r\n      let dy = this.isInRange(y, Constants.CANVAS_HEIGHT) ? particle.dy : -particle.dy;\r\n      particles.push({x, y, dx, dy, state: particle.state});\r\n    }\r\n    return particles;\r\n  }\r\n\r\n  elapsedMiliseconds(ms: number, time: Date) {\r\n    return time.getDate() - this.state.startTime.getTime() > ms;\r\n  }\r\n\r\n  isInRange(x: number, range: number) : boolean {\r\n    return  (x >= Constants.PARTICLE_RADIUS && x <= range - Constants.PARTICLE_RADIUS);\r\n  }\r\n\r\n  componentDidMount() {\r\n    let rAF = requestAnimationFrame(this.updateAnimationState);\r\n    this.setState({rAF: rAF});\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    cancelAnimationFrame(this.state.rAF);\r\n  }\r\n\r\n  generateRandomParticle(state?: States) : ParticleType {\r\n    let x = Constants.PARTICLE_RADIUS + Math.random() * (Constants.CANVAS_WIDTH - 2 * Constants.PARTICLE_RADIUS);\r\n    let y = Constants.PARTICLE_RADIUS + Math.random() * (Constants.CANVAS_HEIGHT - 2 * Constants.PARTICLE_RADIUS);\r\n    let dx = (Math.random() - 0.5) * Constants.MAX_SPEED;\r\n    let dy = (Math.random() - 0.5) * Constants.MAX_SPEED;\r\n\r\n    if(state !== undefined) {\r\n      return {x, y, dx, dy, state: state};\r\n    } else {\r\n      return {x, y, dx, dy, state: (Math.random() >= this.props.initInfectedProb) ? States.Healthy : States.Infected};\r\n    }\r\n  }\r\n  \r\n  generateNRandomParticles(n: number) : ParticleType[] {\r\n    let particles: ParticleType[] = [];\r\n    particles.push(this.generateRandomParticle(States.Infected));\r\n    for(let i = 0; i < n; i++){\r\n      particles.push(this.generateRandomParticle());\r\n    }\r\n    return particles;\r\n  }\r\n\r\n  toggleActive = () => {\r\n    this.setState((prevState: AnimationState) => {\r\n      return {active: !prevState.active};\r\n    })\r\n  }\r\n\r\n  showDialog = () => {\r\n    this.setState({dialogOpen: true})\r\n  }\r\n\r\n  render() {\r\n    return <div>\r\n      <ParametersDialog\r\n        handleNumOfParticlesChange={this.props.handleNumOfParticlesChange}\r\n        numOfParticles={this.props.numOfParticles}\r\n        initInfectedProb={this.props.initInfectedProb}\r\n        handleInitInfectedProbChange={this.props.handleInitInfectedProbChange }\r\n        handleClose={this.handleDialogClose}\r\n        open={this.state.dialogOpen}\r\n      >\r\n      </ParametersDialog>\r\n      <Canvas particles={this.state.particles}/> \r\n      <Button variant=\"outlined\" className=\"start-button\" onClick={this.resetState}>\r\n        Reset\r\n      </Button>\r\n      <Button variant=\"outlined\" className=\"start-button\" onClick={this.toggleActive}>\r\n        {this.state.active ? \"Stop\" : \"Start\"}\r\n      </Button>\r\n      <Button variant=\"outlined\" className=\"start-button\" onClick={this.showDialog}>\r\n        Edit Params\r\n      </Button>\r\n    </div>\r\n  }\r\n}\r\n\r\nexport default Animation;","import React from \"react\";\r\nimport Animation from './Animation';\r\n\r\ninterface ContainerState {\r\n  numOfParticles: number;\r\n  initInfectedProb: number;\r\n}\r\n\r\nexport default class Container extends React.Component{\r\n  state: ContainerState = {\r\n    numOfParticles: 100,\r\n    initInfectedProb: 0.01\r\n  }\r\n\r\n  handleNumOfParticlesChange = (e: any, newValue: number | number[]) => {\r\n    this.setState({numOfParticles: newValue});\r\n  }\r\n\r\n  handleInitInfectedPRobChange = (e: any, newValue: number | number[]) => {\r\n    this.setState({initInfectedProb: newValue});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <h3>\r\n            🥔 infection spread simulation 🥔\r\n          </h3>\r\n          <Animation\r\n            initInfectedProb={this.state.initInfectedProb}\r\n            handleInitInfectedProbChange={this.handleInitInfectedPRobChange }\r\n            numOfParticles={this.state.numOfParticles}\r\n            handleNumOfParticlesChange={this.handleNumOfParticlesChange}\r\n          />\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\nimport Container from './common/Container';\n\nimport './App.scss';\n\nfunction App() {\n  return (\n    <Container/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}