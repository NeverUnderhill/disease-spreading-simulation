{"version":3,"sources":["common/Canvas.tsx","common/constants.ts","common/Animation.tsx","App.tsx","serviceWorker.js","index.js"],"names":["Canvas","ctx","this","refs","canvas","getContext","clearRect","props","particles","particle","save","beginPath","arc","x","y","Math","PI","fill","restore","ref","width","height","React","Component","Animation","state","rAF","generateNRandomParticles","updateAnimationState","dx","dy","isInRange","push","requestAnimationFrame","setState","range","cancelAnimationFrame","random","n","i","generateRandomParticle","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iOAoCeA,E,mLAtBX,IACMC,EADSC,KAAKC,KAAKC,OACNC,WAAW,MAC1BJ,GAAKA,EAAIK,UAAU,EAAG,ECfM,IACC,KDWd,oBAKGJ,KAAKK,MAAMC,WALd,IAKnB,IAAI,EAAJ,qBAA4C,CAAC,IAAnCC,EAAkC,QACvCR,IACDA,EAAIS,OACJT,EAAIU,YACJV,EAAIW,IAAIH,EAASI,EAAGJ,EAASK,ECtBE,EDsB4B,EAAG,EAAIC,KAAKC,IACvEf,EAAIgB,OACJhB,EAAIiB,YAXW,iC,+BAiBnB,OAAO,6BACL,4BAAQC,IAAI,SAASC,MC9BS,ID8BsBC,OC7BrB,W,GDUhBC,IAAMC,WEsDZC,E,4MAvDbC,MAAQ,CACNC,IAAK,EACLlB,UAAW,EAAKmB,yBDTuB,M,ECYzCC,qBAAuB,WACrB,IAD2B,EACvBpB,EAA4B,GADL,cAEP,EAAKiB,MAAMjB,WAFJ,IAE3B,IAAI,EAAJ,qBAA0C,CAAC,IAAnCC,EAAkC,QACpCI,EAAIJ,EAASI,EAAIJ,EAASoB,GAC1Bf,EAAIL,EAASK,EAAIL,EAASqB,GAC1BD,EAAK,EAAKE,UAAUlB,EDpBM,KCoBuBJ,EAASoB,IAAMpB,EAASoB,GACzEC,EAAK,EAAKC,UAAUjB,EDpBO,KCoBuBL,EAASqB,IAAMrB,EAASqB,GAC9EtB,EAAUwB,KAAK,CAACnB,IAAGC,IAAGe,KAAIC,QAPD,8BAS3B,IAAIJ,EAAMO,sBAAsB,EAAKL,sBACrC,EAAKM,SAAS,CAACR,IAAKA,EAAKlB,UAAWA,K,wDAG5BK,EAAWsB,GACnB,OAAStB,GD9B0B,GC8BQA,GAAKsB,ED9Bb,I,0CCkCnC,IAAIT,EAAMO,sBAAsB/B,KAAK0B,sBACrC1B,KAAKgC,SAAS,CAACR,IAAKA,M,6CAIpBU,qBAAqBlC,KAAKuB,MAAMC,O,+CAShC,MAAO,CAACb,EDhD2B,EC2CC,IAAAE,KAAKsB,SAK9BvB,EDhDwB,EC4CC,IAAAC,KAAKsB,SAI3BR,GD7Ce,GC0CnBd,KAAKsB,SAAW,IAGRP,GD7CW,GC2CnBf,KAAKsB,SAAW,O,+CAKHC,GAEvB,IADA,IAAI9B,EAA4B,GACxB+B,EAAI,EAAGA,EAAID,EAAGC,IACpB/B,EAAUwB,KAAK9B,KAAKsC,0BAEtB,OAAOhC,I,+BAIP,OAAO,6BACL,kBAAC,EAAD,CAAQA,UAAWN,KAAKuB,MAAMjB,iB,GAnDZc,IAAMC,W,MCOfkB,MAbf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,6DAGA,kBAAC,EAAD,SCCYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.64773e87.chunk.js","sourcesContent":["import React from 'react';\r\nimport ParticleType from '../types/ParticleType';\r\nimport * as Constants from './constants';\r\n\r\ninterface CanvasProps {\r\n  particles: ParticleType[];\r\n}\r\n\r\ninterface CanvasState {\r\n\r\n}\r\n\r\nclass Canvas extends React.Component<CanvasProps, CanvasState> {\r\n  componentDidUpdate() {\r\n    const canvas = this.refs.canvas as HTMLCanvasElement;\r\n    const ctx = canvas.getContext('2d');\r\n    if (ctx) ctx.clearRect(0, 0, Constants.CANVAS_WIDTH, Constants.CANVAS_HEIGHT);\r\n\r\n    for(const particle of this.props.particles) {\r\n      if(ctx){\r\n        ctx.save();\r\n        ctx.beginPath();\r\n        ctx.arc(particle.x, particle.y, Constants.PARTICLE_RADIUS, 0, 2 * Math.PI);\r\n        ctx.fill();\r\n        ctx.restore();\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <div>\r\n      <canvas ref=\"canvas\" width={Constants.CANVAS_WIDTH} height={Constants.CANVAS_HEIGHT}></canvas>\r\n    </div>\r\n  }\r\n}\r\n\r\nexport default Canvas;","export const PARTICLE_RADIUS: number = 3;\r\nexport const CANVAS_WIDTH: number = 400;\r\nexport const CANVAS_HEIGHT: number = 400;\r\nexport const MAX_SPEED: number = 3;\r\nexport const NUMBER_OF_PARTICLES: number = 300;","import React from 'react';\r\nimport ParticleType from '../types/ParticleType';\r\nimport * as Constants from './constants';\r\nimport Canvas from './Canvas';\r\n\r\ninterface AnimationState {\r\n  particles: ParticleType[];\r\n  rAF: number;\r\n}\r\n\r\nclass Animation extends React.Component {\r\n  state = {\r\n    rAF: 0,\r\n    particles: this.generateNRandomParticles(Constants.NUMBER_OF_PARTICLES)\r\n  }\r\n\r\n  updateAnimationState = () => {\r\n    let particles: ParticleType[] = [];\r\n    for(let particle of this.state.particles) {\r\n      let x = particle.x + particle.dx;\r\n      let y = particle.y + particle.dy;\r\n      let dx = this.isInRange(x, Constants.CANVAS_WIDTH) ? particle.dx : -particle.dx;\r\n      let dy = this.isInRange(y, Constants.CANVAS_HEIGHT) ? particle.dy : -particle.dy;\r\n      particles.push({x, y, dx, dy});\r\n    }\r\n    let rAF = requestAnimationFrame(this.updateAnimationState);\r\n    this.setState({rAF: rAF, particles: particles});\r\n  }\r\n\r\n  isInRange(x: number, range: number) : boolean {\r\n    return  (x >= Constants.PARTICLE_RADIUS && x <= range - Constants.PARTICLE_RADIUS);\r\n  }\r\n\r\n  componentDidMount() {\r\n    let rAF = requestAnimationFrame(this.updateAnimationState);\r\n    this.setState({rAF: rAF});\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    cancelAnimationFrame(this.state.rAF);\r\n  }\r\n\r\n  generateRandomParticle() : ParticleType {\r\n    let x = Constants.PARTICLE_RADIUS + Math.random() * (Constants.CANVAS_WIDTH - 2 * Constants.PARTICLE_RADIUS);\r\n    let y = Constants.PARTICLE_RADIUS + Math.random() * (Constants.CANVAS_HEIGHT - 2 * Constants.PARTICLE_RADIUS);\r\n    let dx = (Math.random() - 0.5) * Constants.MAX_SPEED;\r\n    let dy = (Math.random() - 0.5) * Constants.MAX_SPEED;\r\n\r\n    return {x, y, dx, dy};\r\n  }\r\n  \r\n  generateNRandomParticles(n: number) : ParticleType[] {\r\n    let particles: ParticleType[] = [];\r\n    for(let i = 0; i < n; i++){\r\n      particles.push(this.generateRandomParticle());\r\n    }\r\n    return particles;\r\n  }\r\n\r\n  render() {\r\n    return <div>\r\n      <Canvas particles={this.state.particles}/> \r\n    </div>\r\n  }\r\n}\r\n\r\nexport default Animation;","import React from 'react';\nimport Animation from './common/Animation';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>\n          brovid simulation environment\n        </h1>\n        <Animation/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}